1. Set up your environment to use Kaggle API in PythonÂ¶
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
2. Download data
!kaggle datasets download -d salader/dogs-vs-cats
3. Install the zipfile library.
import zipfile

zip_ref = zipfile.ZipFile('/content/dogs-vs-cats.zip','r')
zip_ref.extractall('/content')
zip_ref.close()
4. Import Libraries
import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,BatchNormalization,Dropout
5. Generetor
train_ds = keras.utils.image_dataset_from_directory(
    directory='/content/train',
    labels="inferred",
    label_mode="int",
    batch_size=32,
    image_size=(256, 256),
)
test_ds = keras.utils.image_dataset_from_directory(
    directory='/content/test',
    labels="inferred",
    label_mode="int",
    batch_size=32,
    image_size=(256, 256),
)
6. Normalize
def process(image,label):
    image = tf.cast(image/255. , tf.float32)
    return image,label

train_ds = train_ds.map(process)
test_ds = test_ds.map(process)
7. Build model
model = Sequential([
    Conv2D(32,(3,3),padding='valid',activation='relu',input_shape=(256,256,3)),
    BatchNormalization(),
    MaxPooling2D((2,2),strides=2,padding='valid'),
    Conv2D(64,(3,3),padding='valid',activation='relu'),
    BatchNormalization(),
    MaxPooling2D((2,2),strides=2,padding='valid'),
    Conv2D(128,(3,3),padding='valid',activation='relu'),
    BatchNormalization(),
    MaxPooling2D((2,2),strides=2,padding='valid'),
    Flatten(),
    Dense(128,activation='relu'),
    Dropout(0.1),
    Dense(64,activation='relu'),
    Dropout(0.1),
    Dense(1,activation='sigmoid')
])
model.summary()
8. Compile model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
9. Start train
history = model.fit(train_ds ,epochs=10,validation_data=test_ds)
10. Ploting
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='test')
plt.legend()
plt.show()
11. Model predict
import cv2

test_img = cv2.imread('/content/test/cats/cat.12118.jpg')
plt.imshow(test_img)
test_img = cv2.resize(test_img,(256,256))
test_input = test_img.reshape((1,256,256,3))
model.predict(test_input)